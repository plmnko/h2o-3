package water.codegen.java;

import org.joda.time.DateTime;

import water.H2O;
import water.codegen.CodeGeneratorPipeline;
import water.codegen.JCodeSB;

import static water.util.ArrayUtils.*;

/**
 * FIXME: this is generator for top-level compilation unit:
 *
 */
public class CompilationUnitGenerator extends CodeGeneratorPipeline<CompilationUnitGenerator> {

  /** Package where to generate the class. */
  final String packageName;

  /* Imported packages */
  String[] importedPackages;

  /* Name of compilation unit - should be derived from top-level class. */
  final String name;

  public static CompilationUnitGenerator codegen(String packageName, String name) {
    return new CompilationUnitGenerator(packageName, name);
  }

  public CompilationUnitGenerator(String packageName, String name) {
    this.packageName = packageName;
    this.name = name;
  }

  public CompilationUnitGenerator withPackageImport(String ... packageNames) {
    this.importedPackages = append(this.importedPackages, packageNames);
    return this;
  }

  public CompilationUnitGenerator withClassGenerator(ClassCodeGenerator... ccgs) {
    for (ClassCodeGenerator ccg : ccgs) {
      add(ccg);
    }
    return this;
  }

  @Override
  public void generate(JCodeSB out) {
    // Top level comment (always generated for CUs)
    genClassComment(out);
    // Package of CU
    if (packageName != null) {
      out
          .p("package ").p(packageName).p(';').nl(2);
    }

    // Imported packages
    if (importedPackages != null) {
      for (String importedPackage : importedPackages) {
        out
            .p("import ").p(importedPackage).p(';').nl();
      }
      out.nl(2);
    }

    // Generate defined types
    super.generate(out);
    // Put endline at the end of file
    out.nl();
  }

  public static JCodeSB genClassComment(JCodeSB sb) {
    sb
        .p("/*").ii(2).nl()
        .p("Licensed under the Apache License, Version 2.0").nl()
        .p("  http://www.apache.org/licenses/LICENSE-2.0.html").nl()
        .nl()
        .p("AUTOGENERATED BY H2O at ").p(new DateTime().toString()).nl()
        .p("H2O v").p(H2O.ABV.projectVersion()).p(" (").p(H2O.ABV.describe()).p(")").di(2).nl()
        .p("*/").nl();

    return sb;
  }
}
